# -*- coding: utf-8 -*-
"""pytorch-mnist-VAE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fN4sxUk90rN5eoYck9aNCIcXmYgjGqMV

3a. loading data
"""

# prerequisites
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.autograd import Variable
from torchvision.utils import save_image
import matplotlib.pyplot as plt


# bs = 100
# MNIST Dataset
train_dataset = datasets.MNIST(root='./mnist_data/', train=True, transform=transforms.ToTensor(), download=True)
test_dataset = datasets.MNIST(root='./mnist_data/', train=False, transform=transforms.ToTensor(), download=False)

# Data Loader (Input Pipeline)
# train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=bs, shuffle=True)

"""3a. pre-processing data"""

def get_indices(dataset):
    index = np.zeros([10,1000])
    for j in range(index.shape[0]):
      cnt = 0
      for i in range(len(dataset.targets)):
        if cnt == 1000: continue
        elif cnt < 1000 and dataset.targets[i] == j:
          index[j,cnt] = i
          cnt += 1
    index = index.astype(int)
    return index
indices = get_indices(train_dataset)
indices = indices.reshape(10000)
# print(index.shape)
train_data_arr = np.asarray(train_dataset.data)[indices]
train_target_arr = np.asarray(train_dataset.targets)[indices]
# print(train_data_arr.shape)
# print(train_target_arr.shape)
def subsample(x):
    return x.reshape(-1, 28, 28)[:, ::2, ::2].reshape(-1, 14*14)

def binarize(x):
    x = np.where(x < 128, 0, 1)
    return x
train_data_arr = subsample(train_data_arr)
# print(train_data_arr[0])
train_data_arr = binarize(train_data_arr)
# print(train_data_arr[0])

test_data_arr = np.asarray(test_dataset.data)
test_data_arr_1 = subsample(test_data_arr)
test_data_arr_1 = binarize(test_data_arr_1)
test_target_arr = np.asarray(test_dataset.targets)

print(test_data_arr_1.shape)
print(test_target_arr.shape)

train_data_tensor = torch.Tensor(train_data_arr)
train_target_tensor = torch.Tensor(train_target_arr)
test_data_tensor = torch.Tensor(test_data_arr)
test_target_tensor = torch.Tensor(test_target_arr)
print(train_target_arr.shape)

bs = 256
my_train_dataset = torch.utils.data.TensorDataset(train_data_tensor,train_target_tensor) # create your datset
my_test_dataset = torch.utils.data.TensorDataset(test_data_tensor, test_target_tensor) # create your datset
train_loader = torch.utils.data.DataLoader(my_train_dataset, batch_size=bs, shuffle=True) # create your dataloader
test_loader = torch.utils.data.DataLoader(my_test_dataset, batch_size=bs, shuffle=False) # create your dataloader

class VAE(nn.Module):
    def __init__(self, x_dim, h_dim1, h_dim2, z_dim):
        super(VAE, self).__init__()
        
        # encoder part
        self.fc1 = nn.Linear(x_dim, h_dim1)
        self.fc2 = nn.Linear(h_dim1, h_dim2)
        self.fc31 = nn.Linear(h_dim2, z_dim)
        self.fc32 = nn.Linear(h_dim2, z_dim)

        # decoder part
        self.fc4 = nn.Linear(z_dim, h_dim1)
        self.fc5 = nn.Linear(h_dim1, x_dim)
        
    def encoder(self, x):
        h = F.tanh(self.fc1(x))
        return self.fc31(self.fc2(h)), self.fc32(self.fc2(h))  # mu, log_var
    
    def sampling(self, mu, log_var):
        std = torch.exp(0.5*log_var)
        eps = torch.randn_like(std)
        return eps.mul(std).add_(mu) # return z sample
        
    def decoder(self, z):
        h = F.tanh(self.fc4(z))
        return F.sigmoid(self.fc5(h)) 
    
    def forward(self, x):
        mu, log_var = self.encoder(x.view(-1, 196))
        z = self.sampling(mu, log_var)
        return self.decoder(z), mu, log_var

# build model
vae = VAE(x_dim=196, h_dim1=128, h_dim2 = 16, z_dim=8)
if torch.cuda.is_available():
    vae.cuda()

vae

optimizer = optim.Adam(vae.parameters())
# return reconstruction error + KL divergence losses
def loss_function(recon_x, x, mu, log_var):
    BCE = F.binary_cross_entropy(recon_x, x.view(-1, 196), reduction='sum')
    KLD = -0.5 * torch.sum(1 + torch.log(log_var.exp()) - mu.pow(2) - log_var.exp())
    return BCE + KLD, BCE, KLD

BCE_arr = []
KLD_arr = []
def train(epoch):
    vae.train()
    train_loss = 0
    for batch_idx, (data, _) in enumerate(train_loader):
        data = data.cuda()
        optimizer.zero_grad()
        
        recon_batch, mu, log_var = vae(data)
        loss, BCE, KLD = loss_function(recon_batch, data, mu, log_var)
        loss.backward()
        train_loss += loss.item()
        optimizer.step()
        
        if batch_idx % 256 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item() / len(data)))
            print('BCE: {}'.format(BCE / len(data)))
            print("KLD: {}".format(KLD / len(data)))
            BCE_arr.append(BCE.item() / len(data))
            KLD_arr.append(KLD.item() / len(data))
    print('====> Epoch: {} Average loss: {}'.format(epoch, train_loss / len(train_loader.dataset)))

def test():
    vae.eval()
    test_loss= 0
    with torch.no_grad():
        for data, _ in test_loader:
            data = data.cuda()
            recon, mu, log_var = vae(data)
            
            # sum up batch loss
            loss, BCE, KLD = loss_function(recon, data, mu, log_var)
            test_loss += loss.item()
        
    test_loss /= len(test_loader.dataset)
    print('====> Test set loss: {:.4f}'.format(test_loss))

for epoch in range(200):
    train(epoch)
    test()

"""3b. Plot"""

x = np.arange(0,100,1)
y = KLD_arr[:100]
plt.plot(x,y)
plt.title("Second Term of ELBO vs. Weight Updates")
plt.xlabel("Weight Updates")
plt.ylabel("Second Term of ELBO")
# plt.set_xlabel('Weight')
# plt.set_ylabel('Bias')

print(len(BCE_arr))
x = np.arange(0,100,1)
y = BCE_arr[:100]
plt.plot(x,y)
plt.title("First Term of ELBO vs. Weight Updates")
plt.xlabel("Weight Updates")
plt.ylabel("First Term of ELBO")
# plt.set_xlabel('Weight')
# plt.set_ylabel('Bias')

"""3c. Pick 8 MNIST images, run them through the encoder and the decoder to generate the
synthesized output.
"""

with torch.no_grad():
    raw_data = (test_data_tensor[0:8]).cuda()
    save_image(raw_data.view(8, 1, 14, 14), 'raw_data_figure.png')

    mu, log_var = vae.encoder((test_data_tensor[0:8]).cuda())
    z = vae.sampling(mu.cuda(), log_var.cuda())
    # z = torch.randn(8, 8).cuda()
    print(z)
    sample = vae.decoder(z).cuda()
    
    save_image(sample.view(8, 1, 14, 14), 'testing_figure.png')

# import sys
# from PIL import Image

# images = [Image.open(x) for x in ['raw_data_figure.png', 'testing_figure.png']]
# widths, heights = zip(*(i.size for i in images))

# total_width = sum(widths)
# max_height = max(heights)

# new_im = Image.new('RGB', (total_width, max_height))

# x_offset = 0
# for im in images:
#   new_im.paste(im, (x_offset,0))
#   x_offset += im.size[0]

# new_im.save('test.jpg')
import PIL

list_im = ['raw_data_figure.png', 'testing_figure.png']
imgs = [ PIL.Image.open(i) for i in list_im ]
# pick the image which is the smallest, and resize the others to match it (can be arbitrary image shape here)
min_shape = sorted( [(np.sum(i.size), i.size ) for i in imgs])[0][1]

imgs_comb = np.hstack( (np.asarray( i.resize(min_shape) ) for i in imgs ) )
imgs_comb = np.vstack( (np.asarray( i.resize(min_shape) ) for i in imgs ) )
imgs_comb = PIL.Image.fromarray( imgs_comb)
imgs_comb.save( 'result.jpg' )

"""3d. Sample from the generative model directly"""

with torch.no_grad():
    z = torch.randn(64, 8).cuda()
    sample = vae.decoder(z).cuda()
    save_image(sample.view(64, 1, 14, 14), '3d_testing_figure.png')



